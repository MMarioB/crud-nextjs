{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/fp/Descargas/crud-clase-main/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/fp/Descargas/crud-clase-main/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/fp/Descargas/crud-clase-main/pages/[id]/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n//Importamos lo necesario\nimport fetch from 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Confirm, Button, Loader } from 'semantic-ui-react';\n\nvar Note = function Note(_ref) {\n  _s();\n\n  var note = _ref.note;\n\n  var _useState = useState(false),\n      confirm = _useState[0],\n      setConfirm = _useState[1];\n\n  var _useState2 = useState(false),\n      isDeleting = _useState2[0],\n      setIsDeleting = _useState2[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    if (isDeleting) {\n      deleteNote();\n    }\n  }, [isDeleting]);\n\n  var open = function open() {\n    return setConfirm(true);\n  };\n\n  var close = function close() {\n    return setConfirm(false);\n  }; //Nuestro metodo para borrar\n\n\n  var deleteNote = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var noteId, deleted;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              noteId = router.query.id;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"http://localhost:3000/api/notes/\".concat(noteId), {\n                method: \"Delete\"\n              });\n\n            case 4:\n              deleted = _context.sent;\n              router.push(\"/\");\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function deleteNote() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleDelete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsDeleting(true);\n              close();\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); //interfaz que nos saldria cuando vayamos a eliminar una nota\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-container\",\n    children: [isDeleting ? /*#__PURE__*/_jsxDEV(Loader, {\n      active: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: note.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: note.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"red\",\n        onClick: open,\n        children: \"Eliminar nota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, _this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Confirm, {\n      open: confirm,\n      onCancel: close,\n      onConfirm: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, _this);\n}; //Esta funcion envia la pagina con los datos actualizados desde el servidor\n\n\n_s(Note, \"7TU1BI/QfiqzP1pVHCyqtv2azRQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = Note;\n\nNote.getInitialProps = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4) {\n    var id, res, _yield$res$json, data;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            id = _ref4.query.id;\n            _context3.next = 3;\n            return fetch(\"http://localhost:3000/api/notes/\".concat(id));\n\n          case 3:\n            res = _context3.sent;\n            _context3.next = 6;\n            return res.json();\n\n          case 6:\n            _yield$res$json = _context3.sent;\n            data = _yield$res$json.data;\n            return _context3.abrupt(\"return\", {\n              note: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default Note;\n\nvar _c;\n\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"sources":["/home/fp/Descargas/crud-clase-main/pages/[id]/index.js"],"names":["fetch","useState","useEffect","useRouter","Confirm","Button","Loader","Note","note","confirm","setConfirm","isDeleting","setIsDeleting","router","deleteNote","open","close","noteId","query","id","method","deleted","push","console","log","handleDelete","title","description","getInitialProps","res","json","data"],"mappings":"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","sourcesContent":["//Importamos lo necesario\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { Confirm, Button, Loader } from 'semantic-ui-react';\r\n\r\nconst Note = ({ note }) => {\r\n    const [confirm, setConfirm] = useState(false);\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n        if (isDeleting) {\r\n            deleteNote();\r\n        }\r\n    }, [isDeleting])\r\n\r\n    const open = () => setConfirm(true);\r\n\r\n    const close = () => setConfirm(false);\r\n\r\n    //Nuestro metodo para borrar\r\n    const deleteNote = async () => {\r\n        const noteId = router.query.id;\r\n        try {\r\n            const deleted = await fetch(`http://localhost:3000/api/notes/${noteId}`, {\r\n                method: \"Delete\"\r\n            });\r\n\r\n            router.push(\"/\");\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        setIsDeleting(true);\r\n        close();\r\n    }\r\n\r\n    //interfaz que nos saldria cuando vayamos a eliminar una nota\r\n    return (\r\n        <div className=\"note-container\">\r\n            {isDeleting\r\n                ? <Loader active />\r\n                :\r\n                <>\r\n                    <h1>{note.title}</h1>\r\n                    <p>{note.description}</p>\r\n                    <Button color='red' onClick={open}>Eliminar nota</Button>\r\n                </>\r\n            }\r\n            <Confirm\r\n                open={confirm}\r\n                onCancel={close}\r\n                onConfirm={handleDelete}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Esta funcion envia la pagina con los datos actualizados desde el servidor\r\nNote.getInitialProps = async ({ query: { id } }) => {\r\n    const res = await fetch(`http://localhost:3000/api/notes/${id}`);\r\n    const { data } = await res.json();\r\n\r\n    return { note: data }\r\n}\r\n\r\nexport default Note;"]},"metadata":{},"sourceType":"module"}