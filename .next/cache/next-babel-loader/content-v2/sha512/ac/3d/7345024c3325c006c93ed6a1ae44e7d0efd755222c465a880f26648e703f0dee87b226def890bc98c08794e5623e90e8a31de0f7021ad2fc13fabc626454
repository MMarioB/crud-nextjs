{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/home/fp/Descargas/crud-clase-main/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/fp/Descargas/crud-clase-main/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/fp/Descargas/crud-clase-main/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/fp/Descargas/crud-clase-main/pages/[id]/edit.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//import Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Button, Form, Loader } from 'semantic-ui-react';\nimport { useRouter } from 'next/router'; //Creamos la constante para editar una nota\n\nvar EditNote = function EditNote(_ref) {\n  _s();\n\n  var note = _ref.note;\n\n  var _useState = useState({\n    title: note.title,\n    description: note.description\n  }),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var _useState2 = useState(false),\n      isSubmitting = _useState2[0],\n      setIsSubmitting = _useState2[1];\n\n  var _useState3 = useState({}),\n      errors = _useState3[0],\n      setErrors = _useState3[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        updateNote();\n      } else {\n        setIsSubmitting(false);\n      }\n    }\n  }, [errors]); //Este metodo actualizaria el contenido de la nota que vayamos a editar\n\n  var updateNote = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"http://localhost:3000/api/notes/\".concat(router.query.id), {\n                method: 'PUT',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(form)\n              });\n\n            case 3:\n              res = _context.sent;\n              router.push(\"/\");\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function updateNote() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var errs = validate();\n    setErrors(errs);\n    setIsSubmitting(true);\n  };\n\n  var handleChange = function handleChange(e) {\n    setForm(_objectSpread(_objectSpread({}, form), {}, _defineProperty({}, e.target.name, e.target.value)));\n  }; //Validacion para que la nota no este vacia\n\n\n  var validate = function validate() {\n    var err = {};\n\n    if (!form.title) {\n      err.title = 'El nombre de la tarea no puede estar vacio';\n    }\n\n    if (!form.description) {\n      err.description = 'El contenido de la tarea no puede estar vacio';\n    }\n\n    return err;\n  }; //Interfaz al hacer el update a una nota\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Editar nota\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isSubmitting ? /*#__PURE__*/_jsxDEV(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 27\n      }, _this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          fluid: true,\n          error: errors.title ? {\n            content: 'Por favor introduzca un nombre para esta tarea',\n            pointing: 'below'\n          } : null,\n          label: \"Tarea\",\n          placeholder: \"Introduzca un nombre para la tarea...\",\n          name: \"title\",\n          value: form.title,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, _this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          fluid: true,\n          label: \"Contenido\",\n          placeholder: \"Introduzca el contenido...\",\n          name: \"description\",\n          error: errors.description ? {\n            content: 'Introduzca contenido para esta nota',\n            pointing: 'below'\n          } : null,\n          value: form.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Actualizar nota\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 27\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(EditNote, \"3IV231E3NtfTuRpd2H1Rt22C8Kw=\", false, function () {\n  return [useRouter];\n});\n\n_c = EditNote;\n\nEditNote.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n    var id, res, _yield$res$json, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = _ref3.query.id;\n            _context2.next = 3;\n            return fetch(\"http://localhost:3000/api/notes/\".concat(id));\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 6;\n            return res.json();\n\n          case 6:\n            _yield$res$json = _context2.sent;\n            data = _yield$res$json.data;\n            return _context2.abrupt(\"return\", {\n              note: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport default EditNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditNote\");","map":{"version":3,"sources":["/home/fp/Descargas/crud-clase-main/pages/[id]/edit.js"],"names":["useState","useEffect","fetch","Button","Form","Loader","useRouter","EditNote","note","title","description","form","setForm","isSubmitting","setIsSubmitting","errors","setErrors","router","Object","keys","length","updateNote","query","id","method","headers","body","JSON","stringify","res","push","console","log","handleSubmit","e","preventDefault","errs","validate","handleChange","target","name","value","err","content","pointing","getInitialProps","json","data"],"mappings":"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","sourcesContent":["//import Link from 'next/link';\r\nimport { useState, useEffect } from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { Button, Form, Loader } from 'semantic-ui-react';\r\nimport { useRouter } from 'next/router';\r\n\r\n//Creamos la constante para editar una nota\r\nconst EditNote = ({ note }) => {\r\n    const [form, setForm] = useState({ title: note.title, description: note.description });\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n        if (isSubmitting) {\r\n            if (Object.keys(errors).length === 0) {\r\n                updateNote();\r\n            }\r\n            else {\r\n                setIsSubmitting(false);\r\n            }\r\n        }\r\n    }, [errors])\r\n\r\n    //Este metodo actualizaria el contenido de la nota que vayamos a editar\r\n    const updateNote = async () => {\r\n        try {\r\n            const res = await fetch(`http://localhost:3000/api/notes/${router.query.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(form)\r\n            })\r\n            router.push(\"/\");\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let errs = validate();\r\n        setErrors(errs);\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //Validacion para que la nota no este vacia\r\n    const validate = () => {\r\n        let err = {};\r\n\r\n        if (!form.title) {\r\n            err.title = 'El nombre de la tarea no puede estar vacio';\r\n        }\r\n        if (!form.description) {\r\n            err.description = 'El contenido de la tarea no puede estar vacio';\r\n        }\r\n\r\n        return err;\r\n    }\r\n\r\n    //Interfaz al hacer el update a una nota\r\n    return (\r\n        <div className=\"form-container\">\r\n            <h1>Editar nota</h1>\r\n            <div>\r\n                {\r\n                    isSubmitting\r\n                        ? <Loader active inline='centered' />\r\n                        : <Form onSubmit={handleSubmit}>\r\n                            <Form.Input\r\n                                fluid\r\n                                error={errors.title ? { content: 'Por favor introduzca un nombre para esta tarea', pointing: 'below' } : null}\r\n                                label='Tarea'\r\n                                placeholder='Introduzca un nombre para la tarea...'\r\n                                name='title'\r\n                                value={form.title}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <Form.TextArea\r\n                                fluid\r\n                                label='Contenido'\r\n                                placeholder='Introduzca el contenido...'\r\n                                name='description'\r\n                                error={errors.description ? { content: 'Introduzca contenido para esta nota', pointing: 'below' } : null}\r\n                                value={form.description}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <Button type='submit'>Actualizar nota</Button>\r\n                        </Form>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nEditNote.getInitialProps = async ({ query: { id } }) => {\r\n    const res = await fetch(`http://localhost:3000/api/notes/${id}`);\r\n    const { data } = await res.json();\r\n\r\n    return { note: data }\r\n}\r\n\r\nexport default EditNote;"]},"metadata":{},"sourceType":"module"}