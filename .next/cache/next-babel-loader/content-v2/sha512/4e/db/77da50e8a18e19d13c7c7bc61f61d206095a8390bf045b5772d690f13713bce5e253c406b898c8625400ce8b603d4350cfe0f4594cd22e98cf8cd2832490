{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/fp/Descargas/crud-clase-main/pages/[id]/index.js\";\n//Importamos lo necesario\nimport fetch from 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { Confirm, Button, Loader } from 'semantic-ui-react';\n\nconst Note = ({\n  note\n}) => {\n  const {\n    0: confirm,\n    1: setConfirm\n  } = useState(false);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    if (isDeleting) {\n      deleteNote();\n    }\n  }, [isDeleting]);\n\n  const open = () => setConfirm(true);\n\n  const close = () => setConfirm(false); //Nuestro metodo para borrar\n\n\n  const deleteNote = async () => {\n    const noteId = router.query.id;\n\n    try {\n      const deleted = await fetch(`http://localhost:3000/api/notes/${noteId}`, {\n        method: \"Delete\"\n      });\n      router.push(\"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    close();\n  }; //interfaz que nos saldria cuando vayamos a eliminar una nota\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-container\",\n    children: [isDeleting ? /*#__PURE__*/_jsxDEV(Loader, {\n      active: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: note.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: note.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"red\",\n        onClick: open,\n        children: \"Eliminar nota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Confirm, {\n      open: confirm,\n      onCancel: close,\n      onConfirm: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}; //Esta funcion envia la pagina con los datos actualizados desde el servidor\n\n\nNote.getInitialProps = async ({\n  query: {\n    id\n  }\n}) => {\n  const res = await fetch(`http://localhost:3000/api/notes/${id}`);\n  const {\n    data\n  } = await res.json();\n  return {\n    note: data\n  };\n};\n\nexport default Note;","map":{"version":3,"sources":["/home/fp/Descargas/crud-clase-main/pages/[id]/index.js"],"names":["fetch","useState","useEffect","useRouter","Confirm","Button","Loader","Note","note","confirm","setConfirm","isDeleting","setIsDeleting","router","deleteNote","open","close","noteId","query","id","deleted","method","push","error","console","log","handleDelete","title","description","getInitialProps","res","data","json"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,QAAwC,mBAAxC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACvB,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACU,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMY,MAAM,GAAGV,SAAS,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,UAAJ,EAAgB;AACZG,MAAAA,UAAU;AACb;AACJ,GAJQ,EAIN,CAACH,UAAD,CAJM,CAAT;;AAMA,QAAMI,IAAI,GAAG,MAAML,UAAU,CAAC,IAAD,CAA7B;;AAEA,QAAMM,KAAK,GAAG,MAAMN,UAAU,CAAC,KAAD,CAA9B,CAbuB,CAevB;;;AACA,QAAMI,UAAU,GAAG,YAAY;AAC3B,UAAMG,MAAM,GAAGJ,MAAM,CAACK,KAAP,CAAaC,EAA5B;;AACA,QAAI;AACA,YAAMC,OAAO,GAAG,MAAMpB,KAAK,CAAE,mCAAkCiB,MAAO,EAA3C,EAA8C;AACrEI,QAAAA,MAAM,EAAE;AAD6D,OAA9C,CAA3B;AAIAR,MAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;AACH,KAND,CAME,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAXD;;AAaA,QAAMG,YAAY,GAAG,YAAY;AAC7Bd,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAI,IAAAA,KAAK;AACR,GAHD,CA7BuB,CAkCvB;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,eACKL,UAAU,gBACL,QAAC,MAAD;AAAQ,MAAA,MAAM;AAAd;AAAA;AAAA;AAAA;AAAA,YADK,gBAGP;AAAA,8BACI;AAAA,kBAAKH,IAAI,CAACmB;AAAV;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAInB,IAAI,CAACoB;AAAT;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAoB,QAAA,OAAO,EAAEb,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,oBAJR,eAUI,QAAC,OAAD;AACI,MAAA,IAAI,EAAEN,OADV;AAEI,MAAA,QAAQ,EAAEO,KAFd;AAGI,MAAA,SAAS,EAAEU;AAHf;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CArDD,C,CAuDA;;;AACAnB,IAAI,CAACsB,eAAL,GAAuB,OAAO;AAAEX,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAP,KAA6B;AAChD,QAAMW,GAAG,GAAG,MAAM9B,KAAK,CAAE,mCAAkCmB,EAAG,EAAvC,CAAvB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAW,MAAMD,GAAG,CAACE,IAAJ,EAAvB;AAEA,SAAO;AAAExB,IAAAA,IAAI,EAAEuB;AAAR,GAAP;AACH,CALD;;AAOA,eAAexB,IAAf","sourcesContent":["//Importamos lo necesario\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { Confirm, Button, Loader } from 'semantic-ui-react';\r\n\r\nconst Note = ({ note }) => {\r\n    const [confirm, setConfirm] = useState(false);\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n        if (isDeleting) {\r\n            deleteNote();\r\n        }\r\n    }, [isDeleting])\r\n\r\n    const open = () => setConfirm(true);\r\n\r\n    const close = () => setConfirm(false);\r\n\r\n    //Nuestro metodo para borrar\r\n    const deleteNote = async () => {\r\n        const noteId = router.query.id;\r\n        try {\r\n            const deleted = await fetch(`http://localhost:3000/api/notes/${noteId}`, {\r\n                method: \"Delete\"\r\n            });\r\n\r\n            router.push(\"/\");\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        setIsDeleting(true);\r\n        close();\r\n    }\r\n\r\n    //interfaz que nos saldria cuando vayamos a eliminar una nota\r\n    return (\r\n        <div className=\"note-container\">\r\n            {isDeleting\r\n                ? <Loader active />\r\n                :\r\n                <>\r\n                    <h1>{note.title}</h1>\r\n                    <p>{note.description}</p>\r\n                    <Button color='red' onClick={open}>Eliminar nota</Button>\r\n                </>\r\n            }\r\n            <Confirm\r\n                open={confirm}\r\n                onCancel={close}\r\n                onConfirm={handleDelete}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Esta funcion envia la pagina con los datos actualizados desde el servidor\r\nNote.getInitialProps = async ({ query: { id } }) => {\r\n    const res = await fetch(`http://localhost:3000/api/notes/${id}`);\r\n    const { data } = await res.json();\r\n\r\n    return { note: data }\r\n}\r\n\r\nexport default Note;"]},"metadata":{},"sourceType":"module"}