{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/fp/Descargas/crud-clase-main/pages/new.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//Importamos lo necesario\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Button, Form, Loader } from 'semantic-ui-react';\nimport { useRouter } from 'next/router'; //Creamos la constante para crear una nota\n\nconst NewNote = () => {\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    title: '',\n    description: ''\n  });\n  const {\n    0: isSubmitting,\n    1: setIsSubmitting\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const router = useRouter();\n  useEffect(() => {\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        createNote();\n      } else {\n        setIsSubmitting(false);\n      }\n    }\n  }, [errors]);\n\n  const createNote = async () => {\n    try {\n      const res = await fetch('http://localhost:3000/api/notes', {\n        method: 'POST',\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(form)\n      });\n      router.push(\"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errs = validate();\n    setErrors(errs);\n    setIsSubmitting(true);\n  };\n\n  const handleChange = e => {\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [e.target.name]: e.target.value\n    }));\n  }; //Realizamos unas pequeñas validaciones\n\n\n  const validate = () => {\n    let err = {};\n\n    if (!form.title) {\n      err.title = 'Introduzca un nombre para la nota/tarea';\n    }\n\n    if (!form.description) {\n      err.description = 'Introduzca contenido en la tarea';\n    }\n\n    return err;\n  }; //Devolvemos un div que mostrara el cómo agregar una nueva nota\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Crear nota o tarea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isSubmitting ? /*#__PURE__*/_jsxDEV(Loader, {\n        active: true,\n        inline: \"centered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          fluid: true,\n          error: errors.title ? {\n            content: 'Por favor introduzca un nombre para esta tarea',\n            pointing: 'below'\n          } : null,\n          label: \"Tarea\",\n          placeholder: \"Introduzca un nombre para la tarea...\",\n          name: \"title\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          fluid: true,\n          label: \"Contenido\",\n          placeholder: \"Introduzca el contenido...\",\n          name: \"description\",\n          error: errors.description ? {\n            content: 'Introduzca contenido para esta nota',\n            pointing: 'below'\n          } : null,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Crear nota\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\nexport default NewNote;","map":{"version":3,"sources":["/home/fp/Descargas/crud-clase-main/pages/new.js"],"names":["useState","useEffect","fetch","Button","Form","Loader","useRouter","NewNote","form","setForm","title","description","isSubmitting","setIsSubmitting","errors","setErrors","router","Object","keys","length","createNote","res","method","headers","body","JSON","stringify","push","error","console","log","handleSubmit","e","preventDefault","errs","validate","handleChange","target","name","value","err","content","pointing"],"mappings":"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","sourcesContent":["\r\n//Importamos lo necesario\r\nimport { useState, useEffect } from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { Button, Form, Loader } from 'semantic-ui-react';\r\nimport { useRouter } from 'next/router';\r\n\r\n//Creamos la constante para crear una nota\r\nconst NewNote = () => {\r\n    const [form, setForm] = useState({ title: '', description: '' }); \r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const router = useRouter();\r\n\r\n    useEffect(() => {\r\n        if (isSubmitting) {\r\n            if (Object.keys(errors).length === 0) {\r\n                createNote();\r\n            }\r\n            else {\r\n                setIsSubmitting(false);\r\n            }\r\n        }\r\n    }, [errors])\r\n\r\n    const createNote = async () => {\r\n        try {\r\n            const res = await fetch('http://localhost:3000/api/notes', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(form)\r\n            })\r\n            router.push(\"/\");\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let errs = validate();\r\n        setErrors(errs);\r\n        setIsSubmitting(true);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //Realizamos unas pequeñas validaciones\r\n    const validate = () => {\r\n        let err = {};\r\n\r\n        if (!form.title) {\r\n            err.title = 'Introduzca un nombre para la nota/tarea';\r\n        }\r\n        if (!form.description) {\r\n            err.description = 'Introduzca contenido en la tarea';\r\n        }\r\n\r\n        return err;\r\n    }\r\n\r\n    //Devolvemos un div que mostrara el cómo agregar una nueva nota\r\n    return (\r\n        <div className=\"form-container\">\r\n            <h1>Crear nota o tarea</h1>\r\n            <div>\r\n                {\r\n                    isSubmitting\r\n                        ? <Loader active inline='centered' />\r\n                        : <Form onSubmit={handleSubmit}>\r\n                            <Form.Input\r\n                                fluid\r\n                                error={errors.title ? { content: 'Por favor introduzca un nombre para esta tarea', pointing: 'below' } : null}\r\n                                label='Tarea'\r\n                                placeholder='Introduzca un nombre para la tarea...'\r\n                                name='title'\r\n                                onChange={handleChange}\r\n                            />\r\n                            <Form.TextArea\r\n                                fluid\r\n                                label='Contenido'\r\n                                placeholder='Introduzca el contenido...'\r\n                                name='description'\r\n                                error={errors.description ? { content: 'Introduzca contenido para esta nota', pointing: 'below' } : null}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <Button type='submit'>Crear nota</Button>\r\n                        </Form>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewNote;"]},"metadata":{},"sourceType":"module"}